
------------------------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------------------------

git init                    Inicializa novo repositório do Git. Se você quiser colocar um projeto sob controle de revisão, este é o primeiro comando que você precisa aprender.
git clone                   Cria cópia de um Repositório do Git existente. A clonagem é o modo mais comum dos desenvolvedores obterem uma cópia de trabalho de um repositório central.
git add                     Move as alterações do diretório de trabalho para a área de staging. Assim, você tem a oportunidade de preparar um instantâneo antes de realizar o commit ao histórico oficial.
git branch                  Esse comando é a ferramenta de administração de ramificações de uso geral. Permite criar ambientes de desenvolvimento isolados em um único repositório.
git checkout                Além de verificar commits antigos e revisões de arquivos antigos, o git checkout também é a forma de navegar pelas ramificações existentes. Combinado com os comandos básicos do Git, é a maneira de trabalhar em determinada linha de desenvolvimento.
git status                  Exibe o estado do diretório de trabalho e o instantâneo preparado. Utilize essa opção em conjunto com os comandos git add e o git commit para ver com precisão o que vai ser incluído no próximo instantâneo.
git clean                   Remove os arquivos não monitorados do diretório de trabalho. Esse é o correspondente lógico do git reset, que (em geral) só opera em arquivos monitorados.
git commit                  Faz um commit do instantâneo preparado no histórico do projeto. Combinado com git add, esse processo define o fluxo de trabalho básico para todos os usuários do Git.
git push                    É o oposto de buscar (com algumas ressalvas). Permite que você mova uma ramificação local para outro repositório, o que é um modo conveniente de publicar as contribuições. É semelhante ao svn commit, mas envia uma série de commits em vez de um único conjunto de alterações.
git merge                   Uma maneira poderosa de integrar alterações de ramificações divergentes. Após bifurcar o histórico do projeto com o git branch, o git merge permite unificar o histórico de novo.
git pull                    É a versão automatizada do git fetch. Faz o download de ramificação de um repositório remoto e faz a mesclagem imediata na ramificação atual. É o equivalente Git do svn update.
git fetch                   A busca faz o download a partir da ramificação de outro repositório, junto com todos os commits e arquivos associados. Mas, não tenta integrar nada em o repositório local. Assim, você tem a oportunidade de inspecionar as alterações antes de fazer o merge no projeto.
git log                     Permite explorar as revisões anteriores de determinado projeto. Ele oferece várias opções de formatação para exibir o commit de instantâneos.
git rebase                  Permite mover ramificações, o que ajuda a evitar commits de merge desnecessários. A história linear resultante é, em geral, muito mais fácil de entender e explorar.
git reset                   Desfaz as alterações nos arquivos no diretório de trabalho. A redefinição permite limpar ou remover por completo as alterações que não foram enviadas a um repositório público.
git revert                  Desfaz o commit de um instantâneo. Ao identificar um commit com falha, uma maneira fácil e segura de realizar a sua remoção da base de código é por meio da reversão.
git clean -f                Remove arquivos não rastreados da árvore de trabalho
git rm --cache index.html   Remove os arquivos da árvore de trabalho e do índice
git restore index.html      Restaura os arquivos das árvores de trabalho
git tag                     Crie, liste, exclua or verifique um objeto tag assinado com GPG
git stash                   Acumula as alterações em um outro diretório de trabalho

------------------------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------------------------

git init                    # configuração inicial de um novo repositório # Inicializa novo repositório do Git.
git status                  # exibe as condições do diretório de trabalho e da área de staging
git add index.html          # adicionar o arquivo ainda não rastreados
git add .                   # adicionar todos os arquivos ainda não rastreados  # Move as alterações do diretório de trabalho para a área de staging
git commit -m '<msg>'    # comitar todos os tipos de arquivos (-a), com a mensagem(-m '<msg>')

create a new repository on the command line
    echo "# cms-git" >> README.md
    git init
    git add README.md
    git commit -m "first commit"
    git branch -M main
    git remote add origin https://github.com/ChrisMarSilva/cms-git.git
    git push -u origin main

# push an existing repository from the command line
    git remote add origin https://github.com/ChrisMarSilva/cms-git.git
    git branch -M main          # permite criar, listar, renomear e excluir ramificações. 
    git push -u origin main     # enviar seus commits locais para um repositório remoto,

git checkout -b|-B <new_branch>
git checkout -b feature/001
git checkout -b "develop"   # Alterne entre os ramos ou restaure os arquivos da árvore de trabalho # navegar entre ramificações criadas pelo git branch
git push --set-upstream origin develop
git commit -m "#004: alteração do arquivo HTML"
git push # Atualiza as refs remotas junto com os objetos associados a ela
git branch  # Lista, cria ou exclui ramificações
git branch -a # listando suas branchs locais e remotas
git checkout main  # Alterne entre os ramos ou restaure os arquivos da árvore de trabalho
git pull #  Busque e integre-se a outro repositório ou em um ramo local
git merge develop   # Une dois ou mais históricos de desenvolvimento
git clone https://github.com/ChrisMarSilva/cms-git.git Project2  # Clona um repositório em um novo diretório
git clean -f  # Remove arquivos não rastreados da árvore de trabalho
git checkout index.html  # remover as alterações feitas no arquivo index.html
git restore index.html    # arquivos nao comitados
git log  # Exibe os registros log do commit
git branch -d nomeDoBranchLocal  // excluir um branch no local
git push origin --delete nomeDoBranchRemoto  // excluir um branch remoto
git fetch -p

------------------------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------------------------
git config --global core.editor "code --wait"

git config --global user.name "<nome>"
git config --global user.email "<email>"
git config --global author.name "<nome>"
git config --global author.email "<email>"
git config --global committer.name "<nome>"
git config --global committer.email "<email>"

git init
git clone https://github.com/ChrisMarSilva/cms-git.git Project
git clone https://github.com/ChrisMarSilva/cms-git.git MainProject
git clone https://github.com/ChrisMarSilva/cms-git.git Develop.Project
git clone https://github.com/ChrisMarSilva/cms-git.git Feature.Project

git status
git add index.html
git add .
git commit -m '<msg>'
git commit -m "#024: xxxx"
git push

git checkout main
git checkout -b develop main
git branch 

git branch -D nomeDoBranchLocal
git push origin --delete nomeDoBranchRemoto

git pull
git merge develop
git push

git checkout -b feature/1 develop
git push --set-upstream origin feature/1    
git commit -a -m "aaaaaaaa" ou "git add ." e "git commit -m "aaaaaaaa""
git checkout develop
git merge --no-ff feature/1
git push
git branch -d feature/1
git push origin --delete feature/1

git checkout -b release/v1.0.1
git tag v1.0.1
git tag -a v1.0.1 -m “Release do novo componente”
git show v1.0.1
git push origin v1.0.1

git clean -f
git rm --cache index.html
git checkout --
git checkout index.html
git restore index.html 
git reset --hard HEAD~1

git remote show origin

git log
git log main
git log develop
git log --oneline
git reflog
git shortlog

git diff
git diff develop main

git tag <nome>
git tag -a <nome> -m <msg>
git tag -d <nome>

git show 
git show <nome>

git stash 
git stash pop
git stash apply

------------------------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------------------------

git fetch?
git rebase?

git reset?
git revert?
git restore?
git clean?

------------------------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------------------------

Iniciando o Git Flow
    Com comando básico do Git:
        git checkout -b develop
    Com a CLI do Git-flow:
        git flow init

Criação de uma feature
    Com comandos básicos do Git:
        git checkout develop
        git checkout -b feature/<feature-name>
    Com a CLI do Git-flow:
        git flow feature start <feature-name>
            git flow feature start <name>
            git flow feature finish <name>
            git flow feature publish <name>
            git flow feature pull <remote> <name>

Finalização de uma feature
    Com comandos básicos do Git:
        git checkout develop
        git merge <feature-name>
        git branch -d feature/your-feature
    Com a CLI do Git-flow:
        git flow feature finish <feature-name>

Criação de uma Release
    Com comandos básicos do Git:
        git checkout develop
        git checkout -b release/v1.0.2
    Com a CLI do Git-flow:
        git flow release start v1.0.2

Finalização de uma Release
    Com comandos básicos do Git:
        git checkout main
            git merge release/v1.0.2
        git checkout develop
            git merge release/v1.0.2
        git tag v1.0.2 ou git tag -a v1.0.2 -m "Release version v1.0.2"
        git branch -d release/v1.0.2
    Com a CLI do Git-flow:
        git flow release finish v1.0.2

Criação de um Hotfix
    Com comandos básicos do Git:
        git checkout main
        git checkout -b hotfix/<hotfix-name>
    Com a CLI do Git-flow:
        git flow hotfix start <hotfix-name>

Finalização de um Hotfix
    Com comandos básicos do Git:
        git checkout main
            git merge hotfix/<hotfix-name>
        git checkout develop
            git merge hotfix/<hotfix-name>
        git tag v1.0.1 ou git tag -a v1.0.1 -m "Hotfix version 1.0.1"
        git branch -d hotfix/1.0.1
    Com a CLI do Git-flow:
        git flow hotfix finish <hotfix-name>

------------------------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------------------------